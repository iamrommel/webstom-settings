<templateSet group="React">
  <template name="rsc" value="import React from 'react';&#10;&#10;export const  $TM_FILENAME_BASE$ = () =&gt; {&#10; return (&#10;  &lt;React.Fragment&gt;&#10;   $END$&#10;  &lt;/React.Fragment&gt;&#10; )&#10;}&#10;&#10;" description="Creates a stateless React component without PropTypes and ES6 module system" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rc" value="import React, { useContext as useContextCore } from 'react'&#10;&#10;const context = React.createContext()&#10;const CoreProvider = context.Provider&#10;&#10;export const Provider = ({ children, ...props }) =&gt; {&#10;  return (&#10;    &lt;CoreProvider value={{ ...props }}&gt;&#10;      {children}&#10;    &lt;/CoreProvider&gt;&#10;  )&#10;}&#10;&#10;export const useContext = () =&gt; useContextCore(context)&#10;" description="Create a defaul react context" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JSX_HTML" value="true" />
      <option name="JS_STATEMENT" value="true" />
    </context>
  </template>
  <template name="sst" value="const [$NAME$, $SETNAME$ ] = React.useState($DEFAULTVALUE$)" description="Creates a hook state" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="jsSuggestVariableName()" defaultValue="" alwaysStopAt="true" />
    <variable name="SETNAME" expression="camelCase(concat(&quot;set-&quot;, NAME  ))" defaultValue="" alwaysStopAt="false" />
    <variable name="DEFAULTVALUE" expression="" defaultValue="&quot;null&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rsf" value="import React from 'react';&#10;&#10;export default function $TM_FILENAME_BASE$() {&#10; return (&#10;  &lt;&gt;&lt;/&gt;&#10; );}&#10;" description="Creates a stateless React component as a named function without PropTypes" toReformat="true" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="capitalize(camelCase(fileNameWithoutExtension()))" defaultValue="&quot;&quot;" alwaysStopAt="true" />
    <context />
  </template>
  <template name="rci" value="import React from 'react'&#10;import {Provider} from './Context'&#10;import {Layout} from './Layout'&#10;&#10;export const $TM_FILENAME_BASE$ = (props) =&gt; {&#10;  return (&#10;    &lt;Provider {...props}&gt;&#10;      &lt;Layout /&gt;&#10;    &lt;/Provider&gt;&#10;  )&#10;}&#10;" description="index with context and provider" toReformat="false" toShortenFQNames="true">
    <variable name="TM_FILENAME_BASE" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="rsi" value="import React from 'react';&#10;import {Provider} from './Context'&#10;import {Layout} from './Layout'&#10;export default (props) =&gt; {&#10; return (&#10;  &lt;Provider {...props}&gt;&#10;      &lt;Layout/&gt;&#10;  &lt;/Provider&gt;&#10; )&#10; }" description="Creates a stateless React component without PropTypes and ES6 module system but with Implicit Return and props" toReformat="true" toShortenFQNames="true">
    <context />
  </template>
</templateSet>